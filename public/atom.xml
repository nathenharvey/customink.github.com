<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[EngineerInk]]></title>
  <link href="http://technology.customink.com/atom.xml" rel="self"/>
  <link href="http://technology.customink.com/"/>
  <updated>2012-05-17T16:37:43-04:00</updated>
  <id>http://technology.customink.com/</id>
  <author>
    <name><![CDATA[CustomInk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Coderetreat Floyd 2012]]></title>
    <link href="http://technology.customink.com/blog/2012/05/16/coderetreat-floyd-2012/"/>
    <updated>2012-05-16T15:27:00-04:00</updated>
    <id>http://technology.customink.com/blog/2012/05/16/coderetreat-floyd-2012</id>
    <content type="html"><![CDATA[<h2>One Saturday dedicated to honing your craft</h2>

<p>It&#8217;s easy to get caught up in the whirlwind of projects and deadlines and forget that software development is very much a craft that needs to be practiced. The complex requirements and external pressures of a production application often cloud our judgement, forcing us to forgo the fundamental concepts that create great software.</p>

<p>It&#8217;s useful to step away from the code you work on day-to-day to focus on honing your skills merely for the sake of improving as a developer. Corey Haines&#8217; Coderetreat format facilitates this by strongly suggesting its participants delete their code immediately after each session. By the end of the day, the value created is not the code that is written, but the skills and insights learned from writing that code.</p>

<p>The Coderetreat consisted of five 45 minute pairing sessions building <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Conway&#8217;s Game of Life</a>. The &#8216;zero-player&#8217; game is a form of cellular automata that consists of a grid of dead or alive &#8216;cells&#8217; represented by the squares in the grid. Based on a set of four simple rules, the grid comes to life with complex patterns and interactions between the cells.</p>

<p>The rules are:</p>

<ol>
<li>Any live cell with fewer than two live neighbours dies, as if caused by under-population.</li>
<li>Any live cell with two or three live neighbours lives on to the next generation.</li>
<li>Any live cell with more than three live neighbours dies, as if by overcrowding.</li>
<li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>
</ol>


<p>With just a simple initial configuration of cells, constructs like Gosper&#8217;s Glider Gun can be made:</p>

<p><img src="http://technology.customink.com/images/gospers_glider_gun.gif" alt="Gosper's Glider Gun" /></p>

<h3>Session One</h3>

<p>For the first session, I worked with a pair to build up &#8216;Cell&#8217; object using CoffeeScript and Jasmine. It went well, but about half way into the session, Corey Haines changed the requirements of the game to include zombie cells that come to life based on its own set of rules. We were asked about the impact of introducing these new requirements into our code. Now, we weren&#8217;t hugely affected by the change due to not being very far into the implementation, but it was obvious to see how we could have been bitten by the change.</p>

<p>We chose to deal with alive and dead cells through a boolean attribute on the Cell class. Had we fleshed out the game more, our logic and objects would be tightly bound to this concept and introducing a third state would require considerable time and effort.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome Josh Born!]]></title>
    <link href="http://technology.customink.com/blog/2012/05/14/welcome-josh-born/"/>
    <updated>2012-05-14T13:17:00-04:00</updated>
    <id>http://technology.customink.com/blog/2012/05/14/welcome-josh-born</id>
    <content type="html"><![CDATA[<p>The CustomInk technology team wants to extend a warm welcome to our newest member, Josh Born.  Josh wasted no time and hopped onto the deploy train today for his first production release.</p>

<p>At CustomInk we like to <a href="http://www.customink.com/designs/proofs/jub0-000p-fxs7/front.jpg" target="_new">continuously deploy</a> changes to our site.  This means no sprints, no iterations, no milestones.  We work, and when we are satisfied with our work, we deploy it.  On average, engineers deploy updates to our site about five to seven times a day.</p>

<p>We like to manage our deployments in a very low fidelity way, which was inspired largely by the engineers at Etsy.  We call it the &#8220;deploy train&#8221; and it&#8217;s nothing more then a virtual line managed by our campfire topic.</p>

<p><img src="http://technology.customink.com/images/deploy_train.png" alt="Campfire Deploy Train" /></p>

<p>When you are ready to deploy a change, you add yourself to the end of the deploy train and simply wait for your turn.  The responsibility of the engineer at the front of the deploy train is to merge, deploy, and verify his or her changes in production.  When the engineer is satisfied, they take themselves off the list and notify the next engineer in line that it is their turn.</p>

<p><img src="http://technology.customink.com/images/josh_born_ponder_deploy.jpg" alt="Josh ponders his first release" /></p>

<p>This will be the first of many deploys for Josh.  We are very excited to have him on board and look forward to his next release, sometime later this week.</p>

<p><img src="http://technology.customink.com/images/josh_born_first_deploy.png" alt="Josh releases his first code" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Critical Oversight: Indexes]]></title>
    <link href="http://technology.customink.com/blog/2012/04/27/critical-oversight-indexes/"/>
    <updated>2012-04-27T11:48:00-04:00</updated>
    <id>http://technology.customink.com/blog/2012/04/27/critical-oversight-indexes</id>
    <content type="html"><![CDATA[<p>One of the most common production issues I run into are missing indexes.  The other day I got to thinking that they are usually missing because of the evolution of the software.</p>

<p>We might use some rails generators to prototype some basic functionality.  Then we&#8217;ll iterate over a set of stories incorporating new behavior.  Maybe we&#8217;ll do some refactoring, scrap some features, pull out some dead code and &#8220;harden&#8221; some areas we&#8217;ve identified as brittle.  But we almost never analyze the &#8220;data model&#8221; before we deploy.</p>

<p>Have we considered our data access patterns?  Did we create foreign keys to enforce data integrity?  Do we have any idea how big these tables are going to grow?  We almost certainly don&#8217;t need to shard themâ€¦do we?</p>

<p>No, we almost never do this.</p>

<p>Instead we race to ship.  &#8221;<a href="http://www.customink.com/lab/?cid=jub0-000p-fxs7#shared">Deploy early, deploy often</a>&#8221; is our motto, and we love it.  Deploying code is awesome, it means people are going to use it.  People using our code makes us happy because it means we didn&#8217;t waste our time today.  We did something real that people got to use.</p>

<p>A few months down the road comes the tipping point.  One of your tables amasses a few hundred thousand rows.  Your pages start to take seconds to load because your queries take seconds to run.  Your database connections are tied up, and when your site gets enough traffic, things start to fall over.</p>

<p>This literally just happened to us.  Again.  We missed one little index on one little foreign key in one little table.  And then one of our database servers stopped responding.   Spiked CPU, connections maxed out, alerts firing, then fail over.</p>

<p>While Rails makes it really easy to create models without even thinking about the database, Rails also makes it very easy to deal with the database.  In James Edward Gray&#8217;s talk <a href="http://speakerdeck.com/u/jeg2/p/10-things-you-didnt-know-rails-could-do?utm_source=rubyweekly&amp;utm_medium=email">10 Things You Didn&#8217;t Know Rails Could Do</a> he shows you how to use rails migration generators to create your table AND index your fields.</p>

<p>If you don&#8217;t like generators, you can simply use the &#8216;add_index&#8217; method in the migration itself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateFoo</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">up</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:foos</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:foreign_key</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span>  <span class="ss">:other_valuable_data</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">add_index</span><span class="p">(</span><span class="ss">:foos</span><span class="p">,</span> <span class="ss">:foreign_key</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;foos_foreign_key&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, if you don&#8217;t think to add the index when you created the table, you can always create a migration just to add the index.  The key is adding a checkpoint to your development process in which you analyze your data structures for completeness.  Adding this checkpoint gives you a chance to add any missing database constructs before it&#8217;s too late.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyNation 2012]]></title>
    <link href="http://technology.customink.com/blog/2012/03/26/rubynation-2012/"/>
    <updated>2012-03-26T13:36:00-04:00</updated>
    <id>http://technology.customink.com/blog/2012/03/26/rubynation-2012</id>
    <content type="html"><![CDATA[<p><a href="http://www.rubynation.org/">RubyNation</a> is awesome.  Most ruby events are awesome, but in particular I enjoy RubyNation because it&#8217;s local to me.  It&#8217;s not that I don&#8217;t like traveling to other conferences or that I think Washington DC is the best possible place for a conference.  What I love about RubyNation being local is having 200+ ruby developers from my immediate locale in one single place, at one single time.  Of course, it doesn&#8217;t hurt to have <a href="http://onestepback.org">Jim Weirich</a> and <a href="http://coreyhaines.com/">Corey Haines</a> show up, either.</p>

<p>The other thing I love about RubyNation are all the great talks.  Even the bad talks are still good talks.  Even the terrible talks turn into great talks because when you step into the hallway, there are amazing people who showed up to RubyNation waiting to have a great talk with you.  Every year, without fail, I meet new people and learn new things.  I don&#8217;t think you can put a price tag on that.</p>

<p>There were lots of highlights for me this year, and some surprises.  The first surprise should really have been no surprise at all, since it&#8217;s a developing trend at all Ruby/Rails related events: JavaScript.  In his opening keynote, Justin Getland says something to the effect of &#8220;Adapt or die&#8221;.  Justin&#8217;s message was clear: wherever there is a gap, someone will be there to fill it.  There is a gap in JavaScript knowledge, so it&#8217;s time to step in or someone else will.</p>

<p>The first day at RubyNation had one track that was entirely JavaScript and View focused.  The second track was a grab bag of ruby related topics such as toolkits or programming approaches.  Some of the JS/View track presentations that stuck out to me were:</p>

<p>Roy Tomeij&#8217;s talk on <a href="http://roytomeij.com/slides/rubynation2012">Modular and Reusable Front-End code</a>,
Brennan Dunn&#8217;s talk on <a href="http://speakerdeck.com/u/brennandunn/p/rails-without-views">Rails Without Views</a>,
John Athayde&#8217;s talk on <a href="http://speakerdeck.com/u/boboroshi/p/the-rails-view-the-junk-drawer-grows-up">The Rails View: The Junk Drawer Grows Up</a>,
Chris Strom&#8217;s talk on <a href="http://speakerdeck.com/u/chris/p/you-aint-spdy-ruby-nation">You Ain&#8217;t SPDY</a></p>

<p>Andrew Glover&#8217;s <a href="https://github.com/aglover/resque-example">Asynchronous Processing and Messaging</a> talk was a great introduction to Resque and Redis.  Although I didn&#8217;t attend his talk, people told me that Mike Subelsky&#8217;s talk <a href="http://www.subelsky.com/2012/03/slides-from-my-coding-for-uncertainty.html">Coding for Uncertainty</a> was amazing.  Before you knew it, Jim Weirich was wrapping up day one by teaching us how to use Ruby for purely functional programming purposes to implement the <a href="https://twitter.com/#!/karledurante/status/183312951598514176/photo/1">Y Combinator</a>.</p>

<p>Day two had a couple of front end related talks, but really seemed to focus more on some of the toolkits we use with ruby and some theory to help rubyists navigate the programming waters.</p>

<p>I really enjoyed Russ Olsen&#8217;s <a href="http://speakerdeck.com/u/russolsen/p/eloquent-explanations-rubynation-2012">Eloquent Expressions</a> and Jeff Casimir&#8217;s <a href="http://speakerdeck.com/u/j3/p/adventures-on-the-golden-path">Adventures on the Golden Path</a>.  As well, Patrick Peak and Nathen Harvey gave great talks on how to better organize your applications with <a href="http://speakerdeck.com/u/peakpg/p/plays-well-with-others-building-mountable-apps">mountable applications</a> and <a href="https://github.com/nathenharvey/cooking-with-chef">deployment strategies</a>, respectively.  <a href="https://github.com/ajburton">Anthony Burton</a> has posted a more <a href="https://gist.github.com/2182892">complete list of talks here</a>.</p>

<p>Corey Haines closed out the event with a call to arms for our community to mentor the next generation.  Corey&#8217;s point was simple: there is a need for more developers.  Companies will step in to &#8220;make&#8221; new ones.  Do you want good developers or bad developers?  <a href="http://rubytutor.org/">Ruby Tutor</a> is a place where we can help to make the next generation great.</p>

<p>Thanks to all the people who made RubyNation such a great event this year.  See you all next year.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Garbage Collection Tuning for Rails]]></title>
    <link href="http://technology.customink.com/blog/2012/03/16/simple-garbage-collection-tuning-for-rails/"/>
    <updated>2012-03-16T08:07:00-04:00</updated>
    <id>http://technology.customink.com/blog/2012/03/16/simple-garbage-collection-tuning-for-rails</id>
    <content type="html"><![CDATA[<p>Ruby is known for being bad at garbage collection.  The truth is that the default GC settings aren&#8217;t very good for a Rails application so if you run a Rails app you really should do some tuning (this requires either Ruby Enterprise or Ruby 1.9.2).  Here&#8217;s a streamlined process for getting started:</p>

<h3>Get a Baseline</h3>

<p>Turn on collecting GC stats for New Relic (of course you&#8217;re using <a href="http://newrelic.com/">New Relic</a>).  You want to know what you&#8217;re fixing and this will probably show you that about &#8531; of the &#8220;Ruby&#8221; portion of your app response time is really garbage collection.  Just add the following line to your <code>environment.rb</code> file:</p>

<p><code>GC.enable_stats if defined?(GC) &amp;&amp; GC.respond_to?(:enable_stats)</code></p>

<h3>Examine the Heap</h3>

<p>Once you&#8217;ve gathered enough data in NewRelic to be able to see a change, you&#8217;ll want to see what the heap looks like in one of your passenger threads.</p>

<ul>
<li>Take one of your app servers out of production</li>
<li>Install gdb.rb:</li>
</ul>


<p><code>sudo gem install gdb.rb</code></p>

<ul>
<li>Use <code>sudo passenger-status</code> to find a thread that has handled enough requests to be pretty well warmed up and note its PID.</li>
<li>Connect to the passenger thread with gdb.rb:</li>
</ul>


<p><code>sudo gdb.rb &lt;pid&gt;</code></p>

<ul>
<li>Get gdb.rb to print out the stats about your objects:</li>
</ul>


<p><code>ruby objects</code></p>

<p>You&#8217;re looking for a section that looks like this:</p>

<pre><code>HEAPS            9
  SLOTS      3061241
  LIVE       1457106 (47.60%)
  FREE       1604135 (52.40%)
</code></pre>

<p>We&#8217;re going to assume that &#8220;LIVE&#8221; number is representative of how many slots you normally use up.  Round that up to something sensible like 1,500,000.  Now do the math like this:</p>

<pre><code>RUBY_HEAP_MIN_SLOTS=1800000          # Slots Live + 20%
RUBY_HEAP_FREE_MIN=18000             # 1% of HEAP_MIN_SLOTS
RUBY_HEAP_SLOTS_INCREMENT=144000     # 8% of HEAP_MIN_SLOTS
RUBY_HEAP_SLOTS_GROWTH_FACTOR=1
RUBY_GC_MALLOC_LIMIT=60000000
</code></pre>

<p>I know there&#8217;s no explanation for those last two settings, but I haven&#8217;t really explained the math behind the other numbers either.  This is meant to be a good starting point.  Its customized for your app to some degree, but with some assumptions.</p>

<h2>Wrap Your Ruby</h2>

<p>Now create a wrapper script that sets these variables in the environment before calling ruby.  I&#8217;m going to assume you put it in <code>/usr/local/bin</code> and call it <code>ruby_tuned</code>.  The file should look like this (make sure you adjust for the path to ruby on your system):</p>

<pre><code>#!/bin/bash

export RUBY_HEAP_MIN_SLOTS=1800000
export RUBY_HEAP_FREE_MIN=18000
export RUBY_HEAP_SLOTS_INCREMENT=144000
export RUBY_HEAP_SLOTS_GROWTH_FACTOR=1
export RUBY_GC_MALLOC_LIMIT=60000000

exec "/usr/local/bin/ruby" "$@"
</code></pre>

<h2>Update Passenger</h2>

<p>Have passenger use your <code>ruby_tuned</code> wrapper instead of calling ruby directly by updating <code>passenger.conf</code> (look in <code>/etc/apache2/mods-enabled</code> on Ubuntu).  You&#8217;ll want it to look like this:</p>

<pre><code>PassengerRoot /usr/local/lib/ruby/gems/1.8/gems/passenger-3.0.11
PassengerRuby /usr/local/bin/ruby_tuned
</code></pre>

<p>Now restart apache, add the server back into production and check NewRelic to see how you did.</p>

<h2>What We Got</h2>

<p><img src="http://technology.customink.com/images/Response_Time_GC.jpg"></p>

<p>The graph above is from New Relic as I rolled the changes out one server at a time.  When we applied these changes to our first app we saw:</p>

<ul>
<li>Time spent in GC drop from ~35ms per request to ~10ms</li>
<li>CPU usage drop almost in half</li>
<li>A slight increase in memory used</li>
</ul>


<h2>Where Those Numbers Actually Came From</h2>

<p>To understand these settings and what they do checkout:</p>

<ul>
<li><a href="http://www.viddler.com/v/87ae120a">This Presentation from Joe Damato</a></li>
<li><a href="http://www.coffeepowered.net/2009/06/13/fine-tuning-your-garbage-collector/">This Post from Chris Heald</a> (he adds a gem to his app instead of using gdb.rb)</li>
<li><a href="http://www.rubyenterpriseedition.com/documentation.html#_garbage_collector_performance_tuning">The Ruby Enterprise GC documentation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Data Mapper]]></title>
    <link href="http://technology.customink.com/blog/2012/03/02/simple-data-mapper/"/>
    <updated>2012-03-02T15:35:00-05:00</updated>
    <id>http://technology.customink.com/blog/2012/03/02/simple-data-mapper</id>
    <content type="html"><![CDATA[<p>I recently tackled a pretty typical data migration task where some source model had to be transformed into some target model.  About 80% of the elements were mapped field for field, and the other 20% had to be mutated in some way.  Tired of writing one off rake tasks to pull and transform data, I came up with a little data mapper class that I cold reuse in the future.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Mapper</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:source_model</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:mappings</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">AttributeMapping</span><span class="p">;</span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">ListMapping</span> <span class="o">&lt;</span> <span class="no">AttributeMapping</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:fields</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># fields - array of field symbols we want to map data into</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">fields</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">fields</span> <span class="o">=</span> <span class="n">fields</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">transform</span><span class="p">(</span><span class="n">source_obj</span><span class="p">,</span> <span class="n">source_attribute</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{}</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">values</span><span class="o">|</span>
</span><span class='line'>        <span class="n">fields</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">field</span><span class="o">|</span>
</span><span class='line'>          <span class="n">values</span><span class="o">[</span><span class="n">field</span><span class="o">]</span> <span class="o">=</span> <span class="n">source_obj</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">source_attribute</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">ComplexMapping</span> <span class="o">&lt;</span> <span class="no">AttributeMapping</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:field</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:instruction</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># field       - field symbol we want to map data into</span>
</span><span class='line'>    <span class="c1"># instruction - lambda which accepts source object and source attribute. </span>
</span><span class='line'>    <span class="c1">#               expected to return value to be mapped to field (on target obj)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">field</span><span class="p">,</span> <span class="n">instruction</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">field</span> <span class="o">=</span> <span class="n">field</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">instruction</span> <span class="o">=</span> <span class="n">instruction</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">transform</span><span class="p">(</span><span class="n">source_obj</span><span class="p">,</span> <span class="n">source_attribute</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span> <span class="n">field</span> <span class="o">=&gt;</span> <span class="n">instruction</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">source_obj</span><span class="p">,</span> <span class="n">source_attribute</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">source_model</span><span class="p">,</span> <span class="n">mappings</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">source_model</span> <span class="o">=</span> <span class="n">source_model</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">mappings</span> <span class="o">=</span> <span class="n">mappings</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">conjure</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>
</span><span class='line'>    <span class="n">values</span> <span class="o">=</span> <span class="n">map_values_for</span><span class="p">(</span> <span class="nb">self</span><span class="o">.</span><span class="n">source_model</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">mappings</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">model</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">camelize</span><span class="o">.</span><span class="n">constantize</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">map_values_for</span><span class="p">(</span><span class="n">source_model</span><span class="p">,</span> <span class="n">mappings</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{}</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">values</span><span class="o">|</span>
</span><span class='line'>      <span class="n">mappings</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="kp">attr</span><span class="p">,</span> <span class="n">mapping</span><span class="o">|</span>
</span><span class='line'>        <span class="k">if</span> <span class="no">AttributeMapping</span> <span class="o">===</span> <span class="n">mapping</span>
</span><span class='line'>          <span class="n">values</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">mapping</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">source_model</span><span class="p">,</span> <span class="kp">attr</span><span class="p">))</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">values</span><span class="o">[</span><span class="n">mapping</span><span class="o">]</span> <span class="o">=</span> <span class="n">source_model</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the mapper is really simple.  Let&#8217;s say my source model, LegacyCustomer, is based off of a legacy table from an older system and looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">LegacyCustomer</span><span class="p">(</span>
</span><span class='line'>  <span class="n">userid</span><span class="p">:</span> <span class="n">integer</span><span class="p">,</span>        <span class="c1"># primary key</span>
</span><span class='line'>  <span class="n">creationdate</span><span class="p">:</span> <span class="n">datetime</span><span class="p">,</span> <span class="c1"># date record was created</span>
</span><span class='line'>  <span class="n">accountnum</span><span class="p">:</span> <span class="n">string</span>      <span class="c1"># customer number. it&#39;s prefixed with </span>
</span><span class='line'>                          <span class="c1"># &quot;LGCY-&quot; string that we no longer need!</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we want to migrate the LegacyCustomer data to a new Customer model that looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Customer</span><span class="p">(</span>
</span><span class='line'>  <span class="nb">id</span><span class="p">:</span> <span class="n">integer</span><span class="p">,</span>
</span><span class='line'>  <span class="n">created_at</span><span class="p">:</span> <span class="n">datetime</span><span class="p">,</span>
</span><span class='line'>  <span class="n">updated_at</span><span class="p">:</span> <span class="n">datetime</span><span class="p">,</span>
</span><span class='line'>  <span class="n">account_number</span><span class="p">:</span> <span class="n">string</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>My rake task to run the migration would look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:migrate</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:legacy_customers</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">field_mappings</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:userid</span>         <span class="o">=&gt;</span> <span class="ss">:id</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:creation_date</span>  <span class="o">=&gt;</span> <span class="no">Mapper</span><span class="o">::</span><span class="no">ListMapping</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>                          <span class="o">[</span><span class="ss">:created_at</span><span class="p">,</span> <span class="ss">:update_at</span><span class="o">]</span>
</span><span class='line'>                         <span class="p">),</span>
</span><span class='line'>      <span class="ss">:user_data</span>      <span class="o">=&gt;</span> <span class="no">Mapper</span><span class="o">::</span><span class="no">ComplexMapping</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>                          <span class="ss">:account_number</span><span class="p">,</span>
</span><span class='line'>                          <span class="nb">lambda</span> <span class="p">{</span><span class="o">|</span><span class="n">obj</span><span class="p">,</span> <span class="kp">attr</span><span class="o">|</span> <span class="n">obj</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;LGCY-&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)}</span>
</span><span class='line'>                         <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">LegacyCustomer</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">legacy_customer</span><span class="o">|</span>
</span><span class='line'>      <span class="n">mapper</span> <span class="o">=</span> <span class="no">Mapper</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">legacy_customer</span><span class="p">,</span> <span class="n">field_mappings</span><span class="p">)</span>
</span><span class='line'>      <span class="n">customer</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="n">conjure</span><span class="p">(</span><span class="ss">:customer</span><span class="p">)</span>
</span><span class='line'>      <span class="n">customer</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As my migration marched on &#8216;one off&#8217; data errors would pop up causing the script to fail.  This is what ultimately led me to create the ComplexMapping class.  Every time some white space, funny character, or field split requirement bombed my script I was able to add some code to my ComplexMapping requirement to solve it.</p>

<p>I wanted to share this experience for two reasons:</p>

<p>Ruby is awesome.  Metaprogramming and Procs made this mapper possible.  When I first started programming with Ruby, these were the two hardest concepts for me to wrap my head around.  Investing time into learning these aspects of ruby have made me such a better ruby programmer.</p>

<p>The second reason is to reinforce the lesson that doing things the lazy (comfortable) way will rarely ever benefit you.  This mapper class not only made writing and maintaining my migration script easier.  It has also found it&#8217;s way into some production code.</p>

<p>Abstracting concepts (or remembering the <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">single responsibility principle</a>) will always benefit you in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organizing Your Rails Models]]></title>
    <link href="http://technology.customink.com/blog/2012/02/03/organizing-your-rails-models/"/>
    <updated>2012-02-03T15:38:00-05:00</updated>
    <id>http://technology.customink.com/blog/2012/02/03/organizing-your-rails-models</id>
    <content type="html"><![CDATA[<p>Like people, applications start out small.  Unlike people, applications do not always have a predictable growth pattern.  Sometimes they grow really big, and sometimes not at all.  When applications grow large, organization becomes important because it is no longer possible to remember every detail about your application without consulting the source code.</p>

<p>&#8220;We use Rails, the convention tells us how to organize our code&#8221;.  Yes, but having 50 or more files in your app/models directory is hardly being organized.</p>

<p>A simple thing I like to do is group related models into folders.  This allows you to organize the related models of a domain into a single location while any shared or stand alone models simply remain in the root directory.  For instance, my directory structure may look something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app
</span><span class='line'>|_models
</span><span class='line'>   |_address.rb
</span><span class='line'>   |_orders
</span><span class='line'>      |_order.rb
</span><span class='line'>      |_item.rb
</span><span class='line'>      |_shipping_detail.rb</span></code></pre></td></tr></table></div></figure>


<p>And to make sure Rails can find all of my models, I need to update config/application.rb file as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">+=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">app</span><span class="o">/</span><span class="n">models</span><span class="o">/**</span><span class="s2">&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows developers to quickly see what models make up an order and what models either stand on their own, or are shared across multiple domains.  And for a large application, you are now able to quickly summarize the high level business objects that make up your system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PagerDuty, Nagios and Chef]]></title>
    <link href="http://technology.customink.com/blog/2012/01/31/pagerduty/"/>
    <updated>2012-01-31T10:14:00-05:00</updated>
    <id>http://technology.customink.com/blog/2012/01/31/pagerduty</id>
    <content type="html"><![CDATA[<h2>Three Things that Work Great Together</h2>

<p>If you use Chef and Nagios, you already know what a great combination they make.  As you build new servers they automatically start getting monitored by Nagios.  Without you having to do anything they&#8217;re grouped together based on role, so its easy to apply the same checks for all servers in a given role.  If you haven&#8217;t tried Nagios built with the chef cookbook its easy to get started with this <a href="http://wiki.opscode.com/display/chef/Nagios+Quick+Start">guide</a> from Opscode.</p>

<p><a href="http://www.pagerduty.com/]">PagerDuty</a> is a service that manages your on-call alerting and escalation policies.  Its hard to love a service that wakes you up in the middle of the night telling you about problems with your servers (my wife is really not a fan), but PagerDuty is helpful.  We generally set it to send an email about a problem first, then send an SMS text and finally to actually make a phone call if no one has responded.  It will go through a rotating list of people on call and accepts alerts from a number of monitoring services including Nagios and AlertSite.</p>

<p>Opscode recently accepted my addition of a PagerDuty recipe to the <a href="https://github.com/opscode/cookbooks/tree/master/nagios">Nagios cookbook</a> which makes it incredibly easy to connect your Nagios instance to PagerDuty.  You just add a PagerDuty API key as an attribute, apply the pagerduty recipe to your nagios server (see their <a href="http://www.pagerduty.com/docs/guides/nagios-integration-guide">guide</a> for instructions on getting your key) and you&#8217;re good to go.</p>

<p>If you add the API key(s) to your Chef environments, you can tie each environment to a different escalation policy.  That way your staging environments just send email alerts while production actually texts and calls.</p>

<p>One of the big wins of using the Nagios plugins is that if a service recovers the PagerDuty incident gets resolved automatically so it doesn&#8217;t continue to escalate the problem.  Also if you acknowledge a problem in Nagios the acknowledgment flows through to PagerDuty.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Green Screen]]></title>
    <link href="http://technology.customink.com/blog/2012/01/02/green-screen/"/>
    <updated>2012-01-02T14:17:00-05:00</updated>
    <id>http://technology.customink.com/blog/2012/01/02/green-screen</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/customink/greenscreen">Green Screen</a> is a build monitoring tool that is designed to be used as a dynamic Big Visible Chart (BVC) in your work area. It lets you add links to your build servers and displays the largest possible information on a monitor so that the team can see the build status from anywhere in the room.</p>

<p><img class="right" src="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/greenscreen.jpg" width="300" height="225" title="Green Screen Monitor" alt="Green Screen Monitor">
We use Green Screen at <a href="http://www.customink.com">CustomInk</a> to look after our continuous integration servers, currently 3 Hudson servers and one Jenkins cluster. We have a monitor mounted in the engineering office that makes it easy for everyone to quickly assess the build status.</p>

<p>Green Screen is a simple Sinatra application that is <a href="http://nathenharvey.com/blog/2012/01/02/deploying-green-screen">easy to configure and deploy</a>.  It works well with any continuous integration server that conforms to the <a href="http://confluence.public.thoughtworks.org/display/CI/Multiple+Project+Summary+Reporting+Standard">multiple project summary reporting standard</a>.</p>

<p>You can see a sample Green Screen app running at <a href="http://greenscreenapp.com">http://greenscreenapp.com</a>.  Be forewarned, this sample Green Screen looks at all of the builds currently running on <a href="http://ci.jenkins-ci.org">http://ci.jenkins-ci.org</a>.  This is fine for demo purposes but you may find it to be a bit overwhelming since it&#8217;s <strong>over 300 builds</strong> at the time of this writing.</p>

<!--more-->


<h2>History</h2>

<p>Green Screen was originally implemented by <a href="https://github.com/martinjandrews">Marty Andrews</a> and <a href="http://blog.martyandrews.net/2009/08/greenscreen-build-monitor-bvc.html">announced on his blog in 2009</a>. In the original version, a build that was in progress would blink on the screen.
<a href="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4565_building.jpg"><img class="center" src="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4565_building.jpg" width="208" height="145" title="martinjandrews Green Screen" alt="martinjandrews Green Screen"></a></p>

<p><a href="https://github.com/rsutphin">Rhett Sutphin</a> improved the layout of green screen and introduced a new color, yellow, for builds that are in progress.
<a href="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4566-building.jpg"><img class="center" src="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4566-building.jpg" width="207" height="145" title="rsutphin Green Screen" alt="rsutphin Green Screen"></a></p>

<p>After using these versions for a while at CustomInk, we decided that the most important thing to know was which builds were failing. Once you get past a handful of builds, it&#8217;s no longer very interesting to see every build. We forked Rhett&#8217;s version and created a <a href="https://github.com/customink/greenscreen">new layout for Green Screen</a>.</p>

<p>If everything is passing, the screen is basically one giant checkmark.</p>

<p><a href="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/green.jpg"><img class="center" src="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/green.jpg" width="210" height="119" title="customink Green Screen" alt="customink Green Screen"></a></p>

<p>If there are any failing builds, they&#8217;re shown in the main area while all others are displayed on the right.</p>

<p><a href="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4567.jpg"><img class="center" src="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4567.jpg" width="210" height="121" title="customink failed build" alt="customink failed build"></a></p>

<p>Finally, a build that previously failed will be shown in yellow while it&#8217;s rebuilding.</p>

<p><a href="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4567_building.jpg"><img class="center" src="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4567_building.jpg" width="210" height="121" title="customink building" alt="customink building">
</a>
We&#8217;ve also added support for controlling which builds are displayed from each CI server. So that you can explicitly include or exclude builds or just go with the default behavior of showing all builds on the server.</p>

<hr />

<p><sub>Reposted from <a href="http://nathenharvey.com/blog/2012/01/02/green-screen/">Nathen Harvey&#8217;s blog</a>.</sub></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why we chose Chef over Puppet at CustomInk]]></title>
    <link href="http://technology.customink.com/blog/2011/11/21/why-we-chose-chef-over-puppet-at-customink/"/>
    <updated>2011-11-21T03:29:00-05:00</updated>
    <id>http://technology.customink.com/blog/2011/11/21/why-we-chose-chef-over-puppet-at-customink</id>
    <content type="html"><![CDATA[<p>Not unlike most technology choices, the choice of which configuration management tool to use for managing your infrastructure as code is sure to spark debate among opinionated technologists. There are certainly a number of choices available all of which have their own strengths and weaknesses. There are a number of things to consider as you select a tool.</p>

<p>Before we get into any of the specifics, I want to make it clear that the &#8220;right&#8221; answer to this question is a simple, but emphatic &#8220;yes!&#8221; Yes, you should be using a tool that allows you to manage your infrastructure as code. That tool should NOT be a server.txt file that you keep on the machine that documents the installation, set-up, and configuration changes you&#8217;ve made. Moving that text to somewhere other than the local server is a step in the right direction but isn&#8217;t really the answer. Moving the server.txt file to your corporate wiki is going to suck just as bad.</p>

<p>I think Mark Imbriaco summed it up quite nicely in 140 characters or less:</p>

<blockquote><p>Pro-tip: Nobody gives a shit about your opinion of Chef vs. Puppet. Seriously. Just fucking stop it already. #usewhatworksforyou</p><footer><strong>@markimbriaco</strong> <cite><a href='https://twitter.com/markimbriaco/statuses/89180299824599041'>twitter.com/markimbriaco/&hellip;</a></cite></footer></blockquote>


<p>As you consider which tool is right for you, you&#8217;ll need to consider a number of questions. I think of these as the WIIFs, or &#8220;what&#8217;s in it for&#8230;&#8221; questions:</p>

<!--more-->


<h3>WIIFM - What&#8217;s in it for me</h3>

<p>You&#8217;re going to want a tool that you&#8217;re happy working with. You&#8217;re going to make an investment in this tool. You&#8217;ll need to learn to be proficient with the tool, master it, and use it in your everyday workflow. Pick something that you&#8217;ll be happy working with for some time.</p>

<h3>WIIFC - What&#8217;s in it for my customers</h3>

<p>It&#8217;s highly unlikely that your customers know or care anything about how your infrastructure was built, provisioned, and managed. Why should they have any say about which tool you pick? Your customers are keenly interested in the services or products you offer. They also care about things like performance, availability, and how quickly you recover from an issue or outage. If they don&#8217;t care about these things, they&#8217;ll likely not be your customers for long. As you grow your business, you&#8217;ll want to have more time for delivering value to customers. Spend less time building, provisioning, upgrading, and repairing your infrastructure.</p>

<h3>WIIFB - What&#8217;s in it for my business</h3>

<p>You may be the only one who has to build and manage the infrastructure in your company but it&#8217;s likely you&#8217;ll eventually move beyond a technology team of one. As your technology team grows, you&#8217;ll want to include everyone in the process of managing your infrastructure. This includes the people you might not think of as typically having a say in the infrastructure: developers, quality assurance engineers, etc. You do not want to be the only person in your company who knows how to manage the infrastructure and use the tools you&#8217;ve selected. Sure, it gives you a false sense of job security and feeds into your hero-complex but you need to be able to pass the on-call baton to someone else. Cost may also be a factor to consider when selecting a solution although it&#8217;s likely it&#8217;s more of a data-point than selection criteria, given the solutions that are on the market.</p>

<p>I cannot tell you which tool is right for you. There are many factors including the ones I&#8217;ve listed above. I have some experience with both Puppet and Chef. At <a href="http://www.customink.com">CustomInk</a>, we decided to switch to Chef after using Puppet for about two years.</p>

<h2>Why did we switch?</h2>

<h3>We&#8217;re a Rails shop</h3>

<p>CustomInk is a Ruby on Rails shop and has been for many years. Being a Rails shop helped push us towards Chef in two ways. As a Rails shop, we suffer a bit from from the stereotypical &#8220;newer and shinier is better&#8221; syndrome that many people feel ails the Rails community. As a Rails shop, the domain-specific language (DSL) of Chef is a more comfortable way for us to work. Everyone on the technology team can easily understand the code.</p>

<h3>We started with Puppet</h3>

<p>We started with Puppet so, naturally, that&#8217;s the one we switched from. Puppet was, and actually still is, working well for us. However, we found that working in Puppet was going a bit slower than we&#8217;d like. Also, as we started learning more about Chef we started to see how we&#8217;d be able to quickly benefit from some of the features it offers. To be fair, we were comparing the Puppet we were using (0.24.x) to the latest (at the time) version of Chef (0.9.x). There may well have been ways to do the things we wanted with Puppet but we weren&#8217;t. Chef was intriguing and it looked like we&#8217;d be able to get more from it. Instead of working to refactor our Puppet and get smarter with how to use it, we went with Chef.</p>

<h3>Search</h3>

<p>Chef&#8217;s ability to search our environment and use that information at run time is very appealing. The ability for us to define a database.yml template that can have the &#8220;host&#8221; value populated at runtime based on which host is currently the primary database server is great. Using search in our capistrano recipes to determine where the code should be deployed is a huge win.</p>

<h3>Knife</h3>

<p>Knife is Chef&#8217;s powerful command line interface. There are many things you can do with knife, most of which fall outside of the scope of this article. Knife allows you to interact with your entire infrastructure and Chef code base. Use knife to bootstrap a server, build the scaffolding for a new cookbook, or apply a role to a set of nodes in your environment. You can use knife ssh to execute commands on any number of nodes in your environment. knife ssh + search is a very powerful combination. &#8220;Run this command on all nodes with role X.&#8221;</p>

<h3>Dependency Management</h3>

<p>We found that defining dependencies in Puppet was overly verbose and cumbersome. With Chef, order matters and we could rest assured that dependencies would be met if we specified them in the proper order.</p>

<h3>Strong Community</h3>

<p>OpsCode has done a great job of keeping up a strong community. The community.opscode.com site, where hundreds of cookbooks are shared, is a great way to get started. OpsCode has also hosted numerous webinars, publishes all of their training material, and makes it very easy to contribute patches. Frankly, I don&#8217;t have any experience with this in the Puppet world. However, my lack of experience with this in the Puppet world is likely attributed simply to the way my development habits have changed over time. At CustomInk, we&#8217;ve been able to submit patches to chef, a number of cookbooks, and have also published some of our own cookbooks.</p>

<h3>Developer Happiness</h3>

<p>As I mentioned previously, the DSL with Chef is much more comfortable than that of Puppet. The mental model and workflow suit us. I find that the time I spend working in Chef is when I feel most productive and happy.</p>

<p>I often wonder if the reason Chef is the right tool is because it&#8217;s the second one we&#8217;ve used. Coming to infrastructure as code includes a learning curve. I feel that we&#8217;re better Chef developers because we learned from our experience with Puppet. Some may even agree that Chef&#8217;s a better tool because the developers of Chef learned from their experience with Puppet.</p>

<h3>A note for projects that are just getting started</h3>

<p>If your project is just getting started, the best choice for you is probably not to use any of the configuration management tools that allow you to manage your infrastructure as code. You should stay focused exclusively on delivering value to your customers. It&#8217;s likely that the best solution for you is <a href="http://www.heroku.com/">Heroku</a>. Sure, Heroku puts some constraints on how you build your app, but they&#8217;re a good way for you to think creatively. You can, and should, delay your choice of tools until you&#8217;re ready to spin up your first server.</p>

<h2>TL;DR</h2>

<ul>
<li>If the question is &#8220;Chef or Puppet?&#8221;, the answer is &#8220;Yes.&#8221; You need to manage you infrastructure as code</li>
<li>Search, knife, dependency management, community, and developer happiness were the key reasons we switched</li>
<li>Chef is the right tool for us and it might be the right one for you</li>
<li>If you&#8217;re new to the idea of &#8220;Infrastructure as Code&#8221;, understand that there&#8217;s a learning curve but your efforts will be rewarded</li>
</ul>


<p>Did you have to make a similar choice? What were some of the deciding factors? Which tool or framework did you end up with?</p>

<hr />

<p><sub>Reposted from <a href="http://nathenharvey.com/blog/2011/11/21/why-we-chose-chef-over-puppet-at-customink/">Nathen Harvey&#8217;s blog</a>.</sub></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing mod_rewrite and apache redirects]]></title>
    <link href="http://technology.customink.com/blog/2010/07/16/testing-mod-rewrite-and-apache-redirects/"/>
    <updated>2010-07-16T09:00:00-04:00</updated>
    <id>http://technology.customink.com/blog/2010/07/16/testing-mod-rewrite-and-apache-redirects</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.customink.com">CustomInk</a>, we recently migrated from mongrel to Passenger for our Ruby on Rails website. This migration included a full rewrite of our apache configuration files.</p>

<p>With over 500 redirect and rewrite rules in place I needed a way to ensure my copy-n-paste skills were up to snuff and that we didn&#8217;t loose any redirects along the way.</p>

<p>In my search for help, I found a <a href="http://www.viget.com/extend/test-drive-mod-rewrite-rules-with-testunit/">blog post by Patrick Reagan from Viget labs</a> that described a method for writing tests that will verify all the rewrite rules and redirects. Patrick&#8217;s ideas were packaged up into a gem and available on <a href="http://github.com/eightbitraptor/http_redirect_test">github</a>.</p>

<p>I can now write up tests like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">should_redirect</span> <span class="s2">&quot;/cink/ideas/ideas.jsp&quot;</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">&quot;/inspiration/&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now I can to some TDC (test-driven configuration) whenever I get a request for a new redirect.</p>

<p>What other methods have you used to test your rewrite rules?</p>

<hr />

<p><sub>Reposted from <a href="http://nathenharvey.com/blog/2010/07/16/testing-mod-rewrite-and-apache-redirects/">Nathen Harvey&#8217;s blog</a>.</sub></p>
]]></content>
  </entry>
  
</feed>
